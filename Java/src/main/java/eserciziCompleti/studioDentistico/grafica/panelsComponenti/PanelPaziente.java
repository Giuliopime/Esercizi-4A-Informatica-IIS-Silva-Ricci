package eserciziCompleti.studioDentistico.grafica.panelsComponenti;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import eserciziCompleti.studioDentistico.enums.AzioneDialog;
import eserciziCompleti.studioDentistico.enums.Schermata;
import eserciziCompleti.studioDentistico.gestori.GestoreGrafica;
import eserciziCompleti.studioDentistico.gestori.GestorePazienti;
import eserciziCompleti.studioDentistico.grafica.Colori;
import eserciziCompleti.studioDentistico.grafica.dialogs.pazienti.DialogPaziente;
import eserciziCompleti.studioDentistico.oggetti.Paziente;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Locale;

public class PanelPaziente {
    private JLabel labelNome;
    private JLabel immagine;
    private JPanel panelPaziente;
    private JPanel pannelloTesto;

    private Paziente paziente;
    private boolean maschio;

    public PanelPaziente(Paziente paziente) {
        this.paziente = paziente;
        initGrafica();
    }

    public PanelPaziente() {
        initGraficaNewPaziente();
    }

    private void initGrafica() {
        maschio = paziente.getSesso().toLowerCase().startsWith("m");

        labelNome.setText(paziente.getCognome());
        if (maschio) {
            ImageIcon immagineUomo = new ImageIcon(getClass().getResource("/studioDentistico/manIcon.png"));
            immagine.setIcon(immagineUomo);
            pannelloTesto.setBackground(Colori.azzurro);
        }

        panelPaziente.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                DialogPaziente dialogPaziente = new DialogPaziente("Modifica Paziente", paziente);
                if (!dialogPaziente.getAzione().equals(AzioneDialog.NIENTE)) {
                    if (dialogPaziente.getAzione().equals(AzioneDialog.SALVA))
                        GestorePazienti.getInstance().modifica(dialogPaziente.getPaziente());
                    else
                        GestorePazienti.getInstance().elimina(dialogPaziente.getPaziente().getIDPaziente());

                    GestoreGrafica.getInstance().changePanel(Schermata.PAZIENTI, null);
                }
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                super.mouseEntered(e);
                panelPaziente.setCursor(new Cursor(Cursor.HAND_CURSOR));
                pannelloTesto.setBackground(Colori.verdeChiaroHover);
            }

            @Override
            public void mouseExited(MouseEvent e) {
                super.mouseEntered(e);
                panelPaziente.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                pannelloTesto.setBackground(maschio ? Colori.azzurro : Colori.rosa);
            }
        });
    }

    private void initGraficaNewPaziente() {
        labelNome.setText("Crea Paziente");
        pannelloTesto.setBackground(Colori.verdeChiaro);
        ImageIcon immagineUomo = new ImageIcon(getClass().getResource("/studioDentistico/new.png"));
        immagine.setIcon(immagineUomo);

        panelPaziente.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                super.mouseClicked(e);
                DialogPaziente dialogPaziente = new DialogPaziente("Nuovo paziente");
                if (dialogPaziente.getAzione().equals(AzioneDialog.SALVA)) {
                    GestorePazienti.getInstance().aggiungi(dialogPaziente.getPaziente());
                    GestoreGrafica.getInstance().changePanel(Schermata.PAZIENTI, null);
                }
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                super.mouseEntered(e);
                panelPaziente.setCursor(new Cursor(Cursor.HAND_CURSOR));
                pannelloTesto.setBackground(Colori.verdeChiaroHover);
            }

            @Override
            public void mouseExited(MouseEvent e) {
                super.mouseEntered(e);
                panelPaziente.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                pannelloTesto.setBackground(Colori.verdeChiaro);
            }
        });
    }

    public JPanel getPanelPaziente() {
        return panelPaziente;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelPaziente = new JPanel();
        panelPaziente.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        panelPaziente.setBackground(new Color(-1052173));
        panelPaziente.setForeground(new Color(-15919071));
        panelPaziente.setMaximumSize(new Dimension(170, 170));
        panelPaziente.setMinimumSize(new Dimension(170, 170));
        panelPaziente.setPreferredSize(new Dimension(170, 170));
        pannelloTesto = new JPanel();
        pannelloTesto.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        pannelloTesto.setBackground(new Color(-36193));
        panelPaziente.add(pannelloTesto, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(-1, 40), new Dimension(-1, 40), new Dimension(-1, 40), 0, false));
        labelNome = new JLabel();
        Font labelNomeFont = this.$$$getFont$$$("Heiti SC", Font.BOLD, 20, labelNome.getFont());
        if (labelNomeFont != null) labelNome.setFont(labelNomeFont);
        labelNome.setForeground(new Color(-985873));
        labelNome.setText("Nome Cognome");
        pannelloTesto.add(labelNome, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.setBackground(new Color(-1052173));
        panelPaziente.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        immagine = new JLabel();
        immagine.setIcon(new ImageIcon(getClass().getResource("/studioDentistico/womanIcon.png")));
        immagine.setText("");
        panel1.add(immagine, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelPaziente;
    }
}
