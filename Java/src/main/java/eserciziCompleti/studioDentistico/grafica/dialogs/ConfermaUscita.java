package eserciziCompleti.studioDentistico.grafica.dialogs;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import eserciziCompleti.studioDentistico.gestori.GestoreGrafica;
import eserciziCompleti.studioDentistico.grafica.Colori;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.*;
import java.util.Locale;

public class ConfermaUscita extends JDialog {
    private JPanel contentPane;
    private JButton buttonConferma;
    private JButton buttonAnnulla;
    private JLabel labelDomanda;
    private boolean confermato;

    public ConfermaUscita(String titolo, String domanda) {
        setTitle(titolo);
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonConferma);
        setAlwaysOnTop(true);

        labelDomanda.setText(domanda);

        pack();
        setResizable(false);
        setLocationRelativeTo(GestoreGrafica.getInstance().getFrame());

        initListeners();
        initGraficaBottoni();

        setVisible(true);
    }

    private void initListeners() {
        buttonAnnulla.addActionListener(e -> onAnnulla());

        buttonConferma.addActionListener(e -> onConferma());

        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onAnnulla();
            }
        });

        contentPane.registerKeyboardAction(e -> onAnnulla(), KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
    }

    private void initGraficaBottoni() {
        JButton[] bottoni = new JButton[]{
                buttonAnnulla, buttonConferma
        };

        for (JButton btn : bottoni) {
            btn.addMouseListener(new MouseAdapter() {
                public void mouseEntered(MouseEvent evt) {
                    btn.setCursor(new Cursor(Cursor.HAND_CURSOR));
                    btn.setBackground(Colori.verdeChiaroHover);
                    btn.setForeground(Colori.bianco);
                }

                public void mouseExited(MouseEvent evt) {
                    btn.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                    btn.setBackground(btn.equals(buttonConferma) ? Colori.rosso : Colori.verdeChiaro);
                    btn.setForeground(btn.equals(buttonConferma) ? Colori.bianco : Colori.bluScuro);
                }
            });
        }
    }

    private void onAnnulla() {
        confermato = false;
        dispose();
    }

    private void onConferma() {
        confermato = true;
        dispose();
    }

    public boolean haConfermato() {
        return confermato;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(3, 1, new Insets(15, 15, 15, 15), -1, -1));
        contentPane.setBackground(new Color(-13350554));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel1.setBackground(new Color(-13350554));
        contentPane.add(panel1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel2.setBackground(new Color(-13350554));
        panel1.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonConferma = new JButton();
        buttonConferma.setBackground(new Color(-7070673));
        buttonConferma.setBorderPainted(false);
        buttonConferma.setContentAreaFilled(true);
        buttonConferma.setEnabled(true);
        buttonConferma.setFocusPainted(false);
        buttonConferma.setFocusable(true);
        Font buttonConfermaFont = this.$$$getFont$$$(null, Font.BOLD, 14, buttonConferma.getFont());
        if (buttonConfermaFont != null) buttonConferma.setFont(buttonConfermaFont);
        buttonConferma.setForeground(new Color(-1052173));
        buttonConferma.setHideActionText(false);
        buttonConferma.setHorizontalAlignment(0);
        buttonConferma.setInheritsPopupMenu(false);
        buttonConferma.setLabel("Si");
        buttonConferma.setOpaque(true);
        buttonConferma.setRequestFocusEnabled(true);
        buttonConferma.setRolloverEnabled(false);
        buttonConferma.setSelected(false);
        buttonConferma.setText("Si");
        buttonConferma.setVisible(true);
        panel2.add(buttonConferma, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonAnnulla = new JButton();
        buttonAnnulla.setBackground(new Color(-14503271));
        buttonAnnulla.setBorderPainted(false);
        buttonAnnulla.setContentAreaFilled(true);
        buttonAnnulla.setEnabled(true);
        buttonAnnulla.setFocusPainted(false);
        buttonAnnulla.setFocusable(true);
        Font buttonAnnullaFont = this.$$$getFont$$$(null, Font.BOLD, 14, buttonAnnulla.getFont());
        if (buttonAnnullaFont != null) buttonAnnulla.setFont(buttonAnnullaFont);
        buttonAnnulla.setForeground(new Color(-15919071));
        buttonAnnulla.setHideActionText(false);
        buttonAnnulla.setHorizontalAlignment(0);
        buttonAnnulla.setInheritsPopupMenu(false);
        buttonAnnulla.setLabel("Annulla");
        buttonAnnulla.setOpaque(true);
        buttonAnnulla.setRequestFocusEnabled(true);
        buttonAnnulla.setRolloverEnabled(false);
        buttonAnnulla.setSelected(false);
        buttonAnnulla.setText("Annulla");
        buttonAnnulla.setVisible(true);
        panel2.add(buttonAnnulla, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel3.setBackground(new Color(-13350554));
        contentPane.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        labelDomanda = new JLabel();
        Font labelDomandaFont = this.$$$getFont$$$("Heiti SC", Font.BOLD, 16, labelDomanda.getFont());
        if (labelDomandaFont != null) labelDomanda.setFont(labelDomandaFont);
        labelDomanda.setForeground(new Color(-1052173));
        labelDomanda.setText("Sei sicuro di voler uscire?");
        panel3.add(labelDomanda, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        contentPane.add(spacer2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_FIXED, new Dimension(-1, 10), new Dimension(-1, 10), new Dimension(-1, 10), 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
