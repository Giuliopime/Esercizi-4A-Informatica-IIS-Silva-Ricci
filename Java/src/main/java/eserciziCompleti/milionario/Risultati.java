package eserciziCompleti.milionario;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;

// Si crea una finestra risultati ogni volta che si inizializza la classe, attraverso quindi il costruttore
public class Risultati {
    private JFrame frame;
    private JPanel pannelloRisultati;
    private JButton giocaAncora;
    private JLabel immagineRisultati;

    public Risultati(boolean vittoria, Milionario istanzaMilionario) {
        /*
         Prima cosa si nasconde il frame del milionario
         Attraverso il metodo getFrame() dell'istanza della classe milionario che viene passata a questo costruttore
         */
        istanzaMilionario.getFrame().setVisible(false);

        // Poi creo il frame dei risultati
        frame = new JFrame("Risultati Milionario");
        frame.setContentPane(pannelloRisultati);
        frame.setSize(700, 1400);
        frame.pack();
        frame.setLocation(400, 200);
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        /*
        Al costruttore viene passato anche un booleano che indica se si ha vinto o perso
        In caso l'utente ha perso cambio l'immagine del frame in quella di sconfitta (gameOver.png)
         */
        if (!vittoria) {
            ImageIcon immagineSconfitta = new ImageIcon(getClass().getResource("/milionario/gameOver.png"));
            immagineRisultati.setIcon(immagineSconfitta);
            frame.pack();
        }

        /*
        Ascoltatore per il bottone "Gioca ancora"
        Quando il bottone viene premuto viene messo come invisibile il jFrame dei risultati
        e viene usato il metodo dispose() su di esso per rilasciare le risorse utilizzate dal frame
        Poi si rifÃ  il setup alla classe milionario
         */
        giocaAncora.addActionListener(e -> {
            frame.setVisible(false);
            frame.dispose();
            istanzaMilionario.setup();
        });

        // Una volta impostato il frame lo setto come visibile
        frame.setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        pannelloRisultati = new JPanel();
        pannelloRisultati.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        pannelloRisultati.setBackground(new Color(-16515027));
        giocaAncora = new JButton();
        giocaAncora.setBackground(new Color(-16701828));
        Font giocaAncoraFont = this.$$$getFont$$$(null, Font.BOLD, 18, giocaAncora.getFont());
        if (giocaAncoraFont != null) giocaAncora.setFont(giocaAncoraFont);
        giocaAncora.setForeground(new Color(-65793));
        giocaAncora.setText("Gioca ancora");
        pannelloRisultati.add(giocaAncora, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        immagineRisultati = new JLabel();
        immagineRisultati.setEnabled(true);
        immagineRisultati.setIcon(new ImageIcon(getClass().getResource("/milionario/win.png")));
        immagineRisultati.setText("");
        pannelloRisultati.add(immagineRisultati, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return pannelloRisultati;
    }
}
